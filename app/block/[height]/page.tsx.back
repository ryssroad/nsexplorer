"use client"

import React, { useEffect, useState } from "react"


import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableRow } from "@/components/ui/table"

// import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { BlockDetails } from "@/app/types/blockDetails";
import { Validator } from "@/app/types/validator";

type PageProps = {
  params: {
    height: string;
  };
};

type BlockDetailsProps = {
  blockDetails: BlockDetails;
};

type BlockTransactionsProps = {
  transactions: TransactionType[];
};

type TransactionType = {
  id: string
  // ... other properties of transactions
}

type ValidatorsApiResponse = {
  jsonrpc: string
  id: number
  result: {
    block_height: string
    validators: Validator[]
    count: string
    total: string
  }
}

type ValidatorsResponse = {
  jsonrpc: string
  id: number
  result: {
    block_height: string
    validators: Validator[]
  }
}

// This type will infer params from the file name
type Params = {
  height: string
}

const BlockDetailsComponent: React.FC<BlockDetailsProps> = ({ blockDetails }) => {
  if (!blockDetails) return null;

  const { block_id, header, tx_hashes } = blockDetails;

  return (
    <Card>
      <CardHeader>
        <CardTitle>Block Details</CardTitle>
      </CardHeader>
      <CardContent>
        <Table>
          <TableBody>
            <TableRow>
              <TableCell>Height:</TableCell>
              <TableCell>{header.height}</TableCell>
            </TableRow>
            <TableRow>
              <TableCell>Hash:</TableCell>
              <TableCell>{block_id}</TableCell>
            </TableRow>
            <TableRow>
              <TableCell>Proposer:</TableCell>
              <TableCell>{header.proposer_address}</TableCell>
            </TableRow>
            <TableRow>
              <TableCell>Time:</TableCell>
              {/* Вам понадобится функция для форматирования времени ISO в удобочитаемый формат */}
              <TableCell>{new Date(header.time).toLocaleString()}</TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};

export default function BlockDetailsPage({ params }: PageProps) {
  const { height } = params;
  const [blockDetails, setBlockDetails] = useState<BlockDetails | null>(null);
  const [transactions, setTransactions] = useState<TransactionType[]>([]);
  const [validators, setValidators] = useState<Validator[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string>("");

  useEffect(() => {
    setIsLoading(true);
    if (!height) {
      setIsLoading(false);
      return;
    }

    const BlockDetailsComponent: React.FC<BlockDetailsProps> = ({ blockDetails }) => {
      // Format and render block details here
      // ...
      return (
        <Card>
          <CardHeader>
            <CardTitle>Block Overview</CardTitle>
          </CardHeader>
          <CardContent>
            {/* Render block details */}
          </CardContent>
        </Card>
      );
    };

    const BlockTransactionsComponent: React.FC<BlockTransactionsProps> = ({ transactions }) => {
      // Render transactions here
      // ...
      return (
        <Card>
          <CardHeader>
            <CardTitle>Block Transactions</CardTitle>
          </CardHeader>
          <CardContent>
            {/* Render transactions */}
          </CardContent>
        </Card>
      );
    };

    const indexerApiEndpoint = `${process.env.NEXT_PUBLIC_INDEXER_API_URL}/block/height/${height}`;
    const validatorsApiEndpoint = `${process.env.NEXT_PUBLIC_VALIDATORS_API_URL}/validators?height=${height}&per_page=10`;

    Promise.all([
      fetch(indexerApiEndpoint).then(res => res.json()),
      fetch(validatorsApiEndpoint).then(res => res.json())
    ])
    .then(([blockData, validatorsData]) => {
      setBlockDetails(blockData);
      setValidators(validatorsData.result.validators);
    })
    .catch(error => {
      setError("Block not found on chain or an error occurred while fetching data.");
      console.error("Fetch error:", error);
    })
    .finally(() => {
      setIsLoading(false);
    });
  }, [height]);

  if (isLoading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <div className="text-center mt-4"><p>{error}</p></div>;
  }

  return (
    <div className="p-5 space-y-5">
      <div className="flex flex-wrap -mx-2">
        <div className="w-full lg:w-1/2 px-2">
          <Card>
            <CardHeader>
              <CardTitle>Block Signatures</CardTitle>
            </CardHeader>
            <CardContent>
                <div className="p-4">
                  {validators.slice(0, 10).map((validator, index) => (
                    <React.Fragment key={validator.address}>
                      <div className="text-sm">{validator.address}</div>
                      {index < validators.length - 1 && (
                        <Separator className="my-2" />
                      )}
                    </React.Fragment>
                  ))}
                </div>
            </CardContent>
            <CardFooter>
              <p className="text-sm">
                First 10 signatures, full list at{" "}
                <a href={`https://nam-rpc.systemd.run/validators?height=${height}&per_page=100`}
                  target="_blank" rel="noopener noreferrer"
                  className="text-blue-600 hover:underline">
                  this link
                </a>.
              </p>
            </CardFooter>
          </Card>
        </div>
        <div className="w-full lg:w-1/2 px-2">
          {/* Block Transactions Card Placeholder */}
        </div>
      </div>
    </div>
  );
}
